<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class My_crud extends CI_Controller{
    public function __construct()
    {
        parent::__construct();
        $this->load->model('My_crud_model');
        $this->load->library('form_validation');
        $this->load->library('upload');
       
    }

    public function index(){
      
        
        $data['emp_details']=$this->My_crud_model->getAllEmployee();
        
        $modal_data = null;
        $modal_type = $this->input->get('modal_type');  
        $id = $this->input->get('id');

        if ($modal_type && $id) {
            if ($modal_type == 'department') {
                $modal_data = $this->My_crud_model->getModalData($modal_type,$id);
            } elseif ($modal_type == 'manager') {
                $modal_data = $this->My_crud_model->getModalData($modal_type,$id);
            } elseif ($modal_type == 'address') {
                $modal_data = $this->My_crud_model->getModalData($modal_type,$id);
            }
        }
    
        $data['modal_data'] = $modal_data;
        $data['modal_type'] = $modal_type;
       

        $this->load->view('my_crud_view',$data);
        
    }

public function addEmployee(){
    
    $this->load->model('My_crud_model'); 
  
    $this->form_validation->set_rules('full_name', 'Full Name', 'trim|required|min_length[3]');
    $this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
    $this->form_validation->set_rules('phone_no', 'Phone no', 'trim|required|min_length[10]|max_length[15]|numeric');
    $this->form_validation->set_rules('dob', 'DOB', 'trim|required|callback_validate_dob');
    $this->form_validation->set_rules('gender', 'Gender', 'trim|required');
    $this->form_validation->set_rules('designation', 'Designation', 'trim|min_length[3]|regex_match[/^[a-zA-Z ]+$/]|required');
    $this->form_validation->set_rules('salary', 'Salary', 'trim|numeric|greater_than_equal_to[5000]|required');
    $this->form_validation->set_rules('join_date', 'Join Date', 'trim|required');
   
    $this->form_validation->set_rules('hobbies', 'Hobbies', 'trim|required');
    $this->form_validation->set_rules('achievements', 'Achievements', 'trim');
    $this->form_validation->set_rules('profile_pic', 'Profile Pic', 'trim');

    $this->form_validation->set_rules('department_name', 'Department Name', 'trim|required');
    $this->form_validation->set_rules('manager_name', 'Manager Name', 'trim|required');
    $this->form_validation->set_rules('address_line1', 'Address Name', 'trim|required');
    $this->form_validation->set_rules('address_line2', 'Address Name', 'trim|required');
    $this->form_validation->set_rules('city', 'City', 'trim|required');
    $this->form_validation->set_rules('state', 'State', 'trim|required');
    $this->form_validation->set_rules('country', 'Country', 'trim|required');
    $this->form_validation->set_rules('postal_code', 'Postal_code', 'trim|required');
    $this->form_validation->set_rules('house_number', 'House Number', 'trim|required');
    $this->form_validation->set_rules('street_name', 'Street Name', 'trim|required');
    $this->form_validation->set_rules('landmark', 'Landmark', 'trim|required');
    $this->form_validation->set_rules('area', 'Area', 'trim|required');
    $this->form_validation->set_rules('is_permanent_address', 'Is Permanent Adress', 'trim|required');
    $this->form_validation->set_rules('same_as_permanent', 'Same as Permanent', 'trim|required');
    
   
   
    if ($this->form_validation->run() == false) {
        $this->session->set_flashdata('error', validation_errors());
        $this->load->view('my_crud_view');
        
    } else {
       
      
        $departmentData = [
            'department_name' => $this->input->post('department_name', true)
                ];
             
                // if (method_exists($this->My_crud_model, 'insertDepartment')) {
                    // echo 112332;die;
                    $departmentId=$this->My_crud_model->insertDepartment($departmentData);

                    $managerData=[
                        'manager_name'=> ucwords($this->input->post('manager_name',true))
                    ];
                    $managerId=$this->My_crud_model->insertManager($managerData);
                    $addressData=[
                        'address_line1'=>$this->input->post('address_line1',true),
                        'address_line2'=>$this->input->post('address_line2',true),
                        'city'=>ucwords($this->input->post('city',true)),
                        'state'=>ucwords($this->input->post('state',true)),
                        'country'=>ucwords($this->input->post('country',true)),
                        'postal_code'=>$this->input->post('postal_code',true),
                        'house_number'=>$this->input->post('house_number',true),
                        'street_name'=>$this->input->post('street_name',true),
                        'landmark'=>$this->input->post('landmark',true),
                        'area'=>$this->input->post('area',true),
                        'is_permanent_address'=>$this->input->post('is_permanent_address',true),
                        'same_as_permanent'=>$this->input->post('same_as_permanent',true)
                    ];
                    $addressId=$this->My_crud_model->insertAddress($addressData);
                    
                    $ori_filename=$_FILES['profile_pic']['name'];
                    $new_name=time()."".str_replace(' ','-',$ori_filename);
                    $config=[
                    
                        'upload_path' => './images/',
                    'allowed_types' => 'gif|jpg|png|jpeg',
                    'max_size'=>3072,
                    'file_name'=> $new_name,
                        
                    ];
                   
                    $this->upload->initialize($config);
        
                   
                    if (!$this->upload->do_upload('profile_pic')) { 
                        
                       $this->session->set_flashdata('imageError',$this->upload->display_errors());
                       redirect('My_crud');                      
                    }else{
                        $profilePic=$this->upload->data('file_name');
                        
                    }
                    
                   
                    $empCode = $this->My_crud_model->autoincemp(); 
                    $employeeData = [
                        'emp_code'=>$empCode,
                        'full_name' => ucwords($this->input->post('full_name', true)),
                        'email' => strtolower($this->input->post('email', true)),
                        'phone_no' => $this->input->post('phone_no',true),
                        'dob' => $this->input->post('dob'),
                        'gender' => $this->input->post('gender', true),
                        'designation' => $this->input->post('designation', true),
                        'salary' => $this->input->post('salary', true),
                        'join_date' => $this->input->post('join_date', true),
                        'hobbies' => $this->input->post('hobbies', true),
                        'achievements' => $this->input->post('achievements', true),
                        'profile_pic' => $profilePic,
                        'department_id' => $departmentId,
                        'manager_id'=>$managerId,
                        'address_id'=>$addressId
                        
                       
                    ];
                   
                     $employeeId=$this->My_crud_model->insertEmployee($employeeData);
                
                //     $this->session->set_flashdata('inserted', 'Your data and order saved successfully');
                // } else {
                //     log_message('error', 'insertDepartment method not found in Crud_model');
                // }   
                // print_r($kasdgas);die;

                /*$employeeDataa = [
                    'department_id'=>$departmentId
                ];
                $abc=array_merge($employeeData,$employeeDataa);
                $this->db->insert('employees', $abc);
                $userId = $this->db->insert_id();  
                print_r($userId);die;
            //         if ($department_id) {
            */
            // }
            $this->session->set_flashdata('inserted','employee added successfully');
    }
    
    redirect('My_crud');
    
}

public function update($id){
    $this->form_validation->set_rules('full_name', 'Full Name', 'trim|required|min_length[3]');
    $this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
    $this->form_validation->set_rules('phone_no', 'Phone no', 'trim|required|min_length[10]|max_length[15]|numeric');
    $this->form_validation->set_rules('dob', 'DOB', 'trim|required|callback_validate_dob');
    $this->form_validation->set_rules('gender', 'Gender', 'trim|required');
    $this->form_validation->set_rules('designation', 'Designation', 'trim|min_length[3]|regex_match[/^[a-zA-Z ]+$/]|required');
    $this->form_validation->set_rules('salary', 'Designation', 'trim|numeric|greater_than_equal_to[5000]|required');
    $this->form_validation->set_rules('join_date', 'Join Date', 'trim|required');
    $this->form_validation->set_rules('hobbies', 'Hobbies', 'trim|required');
    $this->form_validation->set_rules('achievements', 'Achievements', 'trim|required');
    

   
if($this->form_validation->run()==false){
    $this->session->set_flashdata('error',validation_errors());
}
else{
   $data=$this->My_crud_model->updateEmployee([
                        'full_name' => ucwords($this->input->post('full_name', true)),
                        'email' => strtolower($this->input->post('email', true)),
                        'phone_no' => $this->input->post('phone_no',true),
                        'dob' => $this->input->post('dob'),
                        'gender' => $this->input->post('gender', true),
                        'designation' => $this->input->post('designation', true),
                        'salary' => $this->input->post('salary', true),
                        'join_date' => $this->input->post('join_date', true),
                        'hobbies' => $this->input->post('hobbies', true),
                        'achievements' => $this->input->post('achievements', true)
                        

    ], $id);
    if($data){
        $this->session->set_flashdata('updated','your data updated successfully');
    }
}
redirect('My_crud');
}

public function deleteEmployee($id){
    $result=$this->My_crud_model->deleteEmployee($id);
if($result==true){
    $this->session->set_flashdata('deleted','the employee data has been deleted');
}
redirect('My_crud');
}
public function validate_dob($dob){
    $birthdate=strtotime($dob);
    $today=strtotime(date('Y-m-d'));
    $age=date('Y',$today)-date('Y',$birthdate);

    if($age<18){
        $this->form_validation->set_message('validate_dob', 'you must be at least 18 years old');
            return false;
    }else{
        return true;
    }
}
public function editEmployee($id){
    $data['singleEmployee']=$this->My_crud_model->getSingleEmployee($id);
    $this->load->view('my_crud_edit',$data);

}


}
?>

